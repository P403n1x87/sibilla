class Cached(object):
    """
    A simple class that provides basic caching support for objects discovered
    from a database connection. Internally, the cache is a standard Python
    dictionary.

    When the cx_Oracle library fails to subscribe to messages generated by
    operations on the database, the cached values may become obsolete and
    give wrong and unexpected results. This can be the case when there are
    concurrent connection to the database. A ``commit`` on every ``Database``
    object well cause all the cached objects to be reset.
    """
    _cached_objects = []

    @staticmethod
    def clear(self):
        """
        A call to ``Cached.clear()`` will clear the list of all the cached
        object. This function is there for assist with garbage collection, but
        improper use could cause some objects to return outdated values even
        after a commit from an ``Database`` object.
        """
        self._cached_objects = []

    @staticmethod
    def reset_all():
        """
        A call to ``Cached.reset_all`` will reset the cache of all cached
        objects. This is intended to be used when one has reasons to believe
        that the cached values might have become outdated. Misuse can impact on
        performance.
        """
        for a in Cached._cached_objects:
            a.reset()

    def __init__(self):
        super(Cached, self).__init__()
        self._cache = {}
        self._cache_id = len(Cached._cached_objects)
        Cached._cached_objects.append(self)

    def get_cached(self, name, default=None):
        """
        Returns a value associated with ``name`` that has been previosly cached
        with a call to ``cache``, or ``default`` if provided.

        Args:
            name (str): the name associated with the cached value to retrieve.

            default (:obj:): Defaults to ``None``. The value that should be
                returned if there isn't a cached one associated with the
                ``name`` provided.

        Returns:
            Any object associated with ``name`` in the cache, or ``default`` if
            if provided, otherwise ``None``.
        """

        return (
            self._cache[name] if name in list(self._cache.keys()) else
            default
        )

    def cache(self, name, value):
        """
        Caches ``value`` under the label ``name``.

        Args:
            name (str): The name to associated to the value in the cache.

            value (:obj:): The object to cache.
        """

        self._cache[name] = value

    def reset(self):
        """
        Resets the cache on the object it is called on.
        """
        self._cache = {}
